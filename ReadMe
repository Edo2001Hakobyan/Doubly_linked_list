Doubly Linked List

A doubly linked list is a data structure that consists of a sequence of nodes, where each node contains a value and two pointers, one to the previous node and one to the next node in the sequence. The first and last nodes in the list are typically called the head and tail, respectively. Unlike a singly linked list, which can only be traversed in one direction (forward), a doubly linked list can be traversed in both directions (forward and backward).

The implementation of a doubly linked list typically involves a node class that contains the data value and pointers to the previous and next nodes in the list. The list itself contains a pointer to the first node (head), a pointer to the last node (tail), and a size variable that keeps track of the number of nodes in the list.

Common operations that can be performed on a doubly linked list include inserting a new node at a specified position, deleting a node at a specified position, accessing the value of a node at a specified position, reversing the order of the nodes in the list, and printing the values stored in each node of the list.

Here is an example implementation of a doubly linked list in C++ that includes the following operations:   
1.push_front: adds a new node to the beginning of the list
2.push_back: adds a new node to the end of the list
3.pop_front: removes the first node from the list
4.pop_back: removes the last node from the list
5.front: returns the value stored in the first node of the list
6.back: returns the value stored in the last node of the list
7.insert: inserts a new node with the given value at the specified index
8.operator[]: returns a reference to the value stored in the node at the specified index
9.reverse: reverses the order of the nodes in the list
10.print: prints the values stored in each node of the list

Usage Makefile. 
To use the Makefile to build and compile your C++ program, navigate to the directory containing the Makefile in a terminal and enter the command make. This will build the default target, which is usuall the main executable file. You can also use the following commands:
1.make clean: Remove all files generated by the build process. 
2.make run: Run the program to the system, if specified in the Makefile.


